// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// vec_at_id_fast
Eigen::VectorXd vec_at_id_fast(const Eigen::MatrixXd& v);
RcppExport SEXP _riemtan_vec_at_id_fast(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_at_id_fast(v));
    return rcpp_result_gen;
END_RCPP
}
// similarity_transform
Eigen::MatrixXd similarity_transform(const Eigen::MatrixXd& A, const Eigen::MatrixXd& X);
RcppExport SEXP _riemtan_similarity_transform(SEXP ASEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(similarity_transform(A, X));
    return rcpp_result_gen;
END_RCPP
}
// symmpart_fast
Eigen::MatrixXd symmpart_fast(const Eigen::MatrixXd& A);
RcppExport SEXP _riemtan_symmpart_fast(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(symmpart_fast(A));
    return rcpp_result_gen;
END_RCPP
}
// safe_logm_cpp
Eigen::MatrixXd safe_logm_cpp(const Eigen::MatrixXd& X);
RcppExport SEXP _riemtan_safe_logm_cpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(safe_logm_cpp(X));
    return rcpp_result_gen;
END_RCPP
}
// airm_log_cpp
Eigen::MatrixXd airm_log_cpp(const Eigen::MatrixXd& sigma, const Eigen::MatrixXd& lambda);
RcppExport SEXP _riemtan_airm_log_cpp(SEXP sigmaSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(airm_log_cpp(sigma, lambda));
    return rcpp_result_gen;
END_RCPP
}
// airm_exp_cpp
Eigen::MatrixXd airm_exp_cpp(const Eigen::MatrixXd& sigma, const Eigen::MatrixXd& v);
RcppExport SEXP _riemtan_airm_exp_cpp(SEXP sigmaSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(airm_exp_cpp(sigma, v));
    return rcpp_result_gen;
END_RCPP
}
// airm_vec_cpp
Eigen::VectorXd airm_vec_cpp(const Eigen::MatrixXd& sigma, const Eigen::MatrixXd& v);
RcppExport SEXP _riemtan_airm_vec_cpp(SEXP sigmaSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(airm_vec_cpp(sigma, v));
    return rcpp_result_gen;
END_RCPP
}
// airm_unvec_cpp
Eigen::MatrixXd airm_unvec_cpp(const Eigen::MatrixXd& sigma, const Eigen::VectorXd& w);
RcppExport SEXP _riemtan_airm_unvec_cpp(SEXP sigmaSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(airm_unvec_cpp(sigma, w));
    return rcpp_result_gen;
END_RCPP
}
// bures_wasserstein_log_cpp
Eigen::MatrixXd bures_wasserstein_log_cpp(const Eigen::MatrixXd& sigma, const Eigen::MatrixXd& lambda);
RcppExport SEXP _riemtan_bures_wasserstein_log_cpp(SEXP sigmaSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(bures_wasserstein_log_cpp(sigma, lambda));
    return rcpp_result_gen;
END_RCPP
}
// bures_wasserstein_exp_cpp
Eigen::MatrixXd bures_wasserstein_exp_cpp(const Eigen::MatrixXd& sigma, const Eigen::MatrixXd& v);
RcppExport SEXP _riemtan_bures_wasserstein_exp_cpp(SEXP sigmaSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(bures_wasserstein_exp_cpp(sigma, v));
    return rcpp_result_gen;
END_RCPP
}
// log_cholesky_log_cpp
Eigen::MatrixXd log_cholesky_log_cpp(const Eigen::MatrixXd& sigma, const Eigen::MatrixXd& lambda);
RcppExport SEXP _riemtan_log_cholesky_log_cpp(SEXP sigmaSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(log_cholesky_log_cpp(sigma, lambda));
    return rcpp_result_gen;
END_RCPP
}
// log_cholesky_exp_cpp
Eigen::MatrixXd log_cholesky_exp_cpp(const Eigen::MatrixXd& sigma, const Eigen::MatrixXd& v);
RcppExport SEXP _riemtan_log_cholesky_exp_cpp(SEXP sigmaSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(log_cholesky_exp_cpp(sigma, v));
    return rcpp_result_gen;
END_RCPP
}
// spd_isometry_to_identity_cpp
Eigen::MatrixXd spd_isometry_to_identity_cpp(const Eigen::MatrixXd& sigma, const Eigen::MatrixXd& v);
RcppExport SEXP _riemtan_spd_isometry_to_identity_cpp(SEXP sigmaSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(spd_isometry_to_identity_cpp(sigma, v));
    return rcpp_result_gen;
END_RCPP
}
// spd_isometry_from_identity_cpp
Eigen::MatrixXd spd_isometry_from_identity_cpp(const Eigen::MatrixXd& sigma, const Eigen::MatrixXd& v);
RcppExport SEXP _riemtan_spd_isometry_from_identity_cpp(SEXP sigmaSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(spd_isometry_from_identity_cpp(sigma, v));
    return rcpp_result_gen;
END_RCPP
}
// scale_vector_for_unvec_cpp
Eigen::VectorXd scale_vector_for_unvec_cpp(const Eigen::VectorXd& w, int n);
RcppExport SEXP _riemtan_scale_vector_for_unvec_cpp(SEXP wSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(scale_vector_for_unvec_cpp(w, n));
    return rcpp_result_gen;
END_RCPP
}
// log_euclidean_log_cpp
Eigen::MatrixXd log_euclidean_log_cpp(const Eigen::MatrixXd& sigma, const Eigen::MatrixXd& lambda);
RcppExport SEXP _riemtan_log_euclidean_log_cpp(SEXP sigmaSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(log_euclidean_log_cpp(sigma, lambda));
    return rcpp_result_gen;
END_RCPP
}
// log_euclidean_exp_cpp
Eigen::MatrixXd log_euclidean_exp_cpp(const Eigen::MatrixXd& ref_pt, const Eigen::MatrixXd& v);
RcppExport SEXP _riemtan_log_euclidean_exp_cpp(SEXP ref_ptSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type ref_pt(ref_ptSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(log_euclidean_exp_cpp(ref_pt, v));
    return rcpp_result_gen;
END_RCPP
}
// dexp_cpp
Eigen::MatrixXd dexp_cpp(const Eigen::MatrixXd& a, const Eigen::MatrixXd& x, int num_points);
RcppExport SEXP _riemtan_dexp_cpp(SEXP aSEXP, SEXP xSEXP, SEXP num_pointsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type num_points(num_pointsSEXP);
    rcpp_result_gen = Rcpp::wrap(dexp_cpp(a, x, num_points));
    return rcpp_result_gen;
END_RCPP
}
// dlog_cpp
Eigen::MatrixXd dlog_cpp(const Eigen::MatrixXd& sigma, const Eigen::MatrixXd& h, int num_points);
RcppExport SEXP _riemtan_dlog_cpp(SEXP sigmaSEXP, SEXP hSEXP, SEXP num_pointsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type h(hSEXP);
    Rcpp::traits::input_parameter< int >::type num_points(num_pointsSEXP);
    rcpp_result_gen = Rcpp::wrap(dlog_cpp(sigma, h, num_points));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_riemtan_vec_at_id_fast", (DL_FUNC) &_riemtan_vec_at_id_fast, 1},
    {"_riemtan_similarity_transform", (DL_FUNC) &_riemtan_similarity_transform, 2},
    {"_riemtan_symmpart_fast", (DL_FUNC) &_riemtan_symmpart_fast, 1},
    {"_riemtan_safe_logm_cpp", (DL_FUNC) &_riemtan_safe_logm_cpp, 1},
    {"_riemtan_airm_log_cpp", (DL_FUNC) &_riemtan_airm_log_cpp, 2},
    {"_riemtan_airm_exp_cpp", (DL_FUNC) &_riemtan_airm_exp_cpp, 2},
    {"_riemtan_airm_vec_cpp", (DL_FUNC) &_riemtan_airm_vec_cpp, 2},
    {"_riemtan_airm_unvec_cpp", (DL_FUNC) &_riemtan_airm_unvec_cpp, 2},
    {"_riemtan_bures_wasserstein_log_cpp", (DL_FUNC) &_riemtan_bures_wasserstein_log_cpp, 2},
    {"_riemtan_bures_wasserstein_exp_cpp", (DL_FUNC) &_riemtan_bures_wasserstein_exp_cpp, 2},
    {"_riemtan_log_cholesky_log_cpp", (DL_FUNC) &_riemtan_log_cholesky_log_cpp, 2},
    {"_riemtan_log_cholesky_exp_cpp", (DL_FUNC) &_riemtan_log_cholesky_exp_cpp, 2},
    {"_riemtan_spd_isometry_to_identity_cpp", (DL_FUNC) &_riemtan_spd_isometry_to_identity_cpp, 2},
    {"_riemtan_spd_isometry_from_identity_cpp", (DL_FUNC) &_riemtan_spd_isometry_from_identity_cpp, 2},
    {"_riemtan_scale_vector_for_unvec_cpp", (DL_FUNC) &_riemtan_scale_vector_for_unvec_cpp, 2},
    {"_riemtan_log_euclidean_log_cpp", (DL_FUNC) &_riemtan_log_euclidean_log_cpp, 2},
    {"_riemtan_log_euclidean_exp_cpp", (DL_FUNC) &_riemtan_log_euclidean_exp_cpp, 2},
    {"_riemtan_dexp_cpp", (DL_FUNC) &_riemtan_dexp_cpp, 3},
    {"_riemtan_dlog_cpp", (DL_FUNC) &_riemtan_dlog_cpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_riemtan(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
